{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/DEMOS/TABULATE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# test                      = require '../../../apps/guy-test'\n# PATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\n# on_process_exit           = require 'exit-hook'\n# sleep                     = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\nSQL                       = String.raw\n# TXT                       = require 'intertext'\nTBL                       = require './intertext-tabulate'\n{ width_of }              = require 'to-width'\n{ lets\n  freeze }                = require 'letsfreezethat'\nSP                        = require 'steampipes'\n{ $\n  $watch\n  $drain }                = SP.export()\nguy                       = require 'guy'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'sql_limit', ( x ) ->\n  return true if @isa.nonempty_text x\n  return true if @isa.cardinal x\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatbl_walk_relation_lines_cfg', tests:\n  \"@isa.object x\":                  ( x ) -> @isa.object x\n  \"@isa.sql_limit x.limit\":         ( x ) -> @isa.sql_limit x.limit\n  \"@isa.nonempty_text x.order_by\":  ( x ) -> @isa.nonempty_text x.order_by\n  \"@isa.nonempty_text x.schema\":    ( x ) -> @isa.nonempty_text x.schema\n  \"@isa.nonempty_text x.name\":      ( x ) -> @isa.nonempty_text x.name\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dbatbl_walk_relation_lines_cfg:\n    limit:      10\n    order_by:   'random()'\n    schema:     'main'\n    name:       null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Tbl\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # validate.dbv_constructor_cfg @cfg = { types.defaults.dbv_constructor_cfg..., cfg..., }\n    @cfg = cfg\n    #.......................................................................................................\n    guy.props.def @, 'dba', { enumerable: false, value: cfg.dba, }\n    delete @cfg.dba\n    @cfg      = freeze @cfg\n    # @tabulate = guy.nowait.for_awaitable @tabulate_async\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _estimate_column_widths: ( query ) ->\n    preview_line_count  = 10 ### TAINT make configurable ###\n    line_count          = 0\n    R                   =\n      leading_rows: []\n      widths:       []\n    for row from query\n      line_count++\n      R.leading_rows.push row\n      for k, idx in Object.keys row\n        R.widths[ idx ] = Math.max ( R.widths[ idx ] ? 0 ), width_of rpr k\n        R.widths[ idx ] = Math.max ( R.widths[ idx ] ? 0 ), width_of rpr row[ k ]\n      # break if line_count >= preview_line_count\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use `cfg` ###\n  _tabulate: ( query ) =>\n    ### TAINT cfg option: echo as-you-go ###\n    ### TAINT cfg option: return list of lines ###\n    ### TAINT cfg option: start with newline ###\n    R           = null\n    { leading_rows\n      widths  } = @_estimate_column_widths query\n    #.....................................................................................................\n    source      = SP.new_push_source()\n    pipeline    = []\n    pipeline.push source\n    pipeline.push TBL.$tabulate { multiline: false, widths, }\n    pipeline.push $ ( d, send ) -> send d.text\n    pipeline.push $drain ( result ) -> R = result.join '\\n'\n    SP.pull pipeline...\n    #.....................................................................................................\n    source.send row for row in leading_rows\n    source.send row for row from query\n    source.end()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use `cfg` ###\n  walk_relation_lines: ( cfg ) ->\n    ### TAINT add support for schemas ###\n    validate.dbatbl_walk_relation_lines_cfg cfg = { types.defaults.dbatbl_walk_relation_lines_cfg..., cfg..., }\n    { schema\n      name\n      order_by\n      limit }       = cfg\n    schema_i        = @dba.sql.I schema\n    qname_i         = schema_i + '.' + @dba.sql.I name\n    limit           = if cfg.limit is null then 1e9 else cfg.limit\n    #.......................................................................................................\n    ### get type of DB object ###\n    ### TAINT implement in `Dba` ###\n    { type, sql, } = @dba.first_row @dba.query SQL\"\"\"\n      select type, sql from #{schema_i}.sqlite_schema\n      where name = $name\n      limit 1;\"\"\", { name, }\n    # #.......................................................................................................\n    # ### get definition of object ###\n    # ### TAINT implement in `Dba` ###\n    # type            = @dba.first_value @dba.query SQL\"\"\"\n    #   select type from #{schema_i}.sqlite_schema\n    #   where name = $name\n    #   limit 1;\"\"\", { name, }\n    # yield sql\n    #.......................................................................................................\n    ### get column names ###\n    ### TAINT implement in `Dba` ###\n    try\n      sample_row      = @dba.first_row @dba.query SQL\"select * from #{qname_i} limit 1\"\n      unless sample_row?\n        yield ( CND.yellow CND.reverse ' 0 ' ) + ( CND.steel \" no rows in #{type} #{qname_i}\" )\n        return null\n      col_names       = Object.keys sample_row\n      # order_by        = [ 1 .. col_names.length ].join ', '\n    catch error\n      error_name = error.name ? error.code ? 'error'\n      yield ( CND.red CND.reverse ' X ' ) + ( CND.steel \" #{error_name}: #{error.message}\" )\n      return null\n    #.......................................................................................................\n    ### get row count ###\n    ### TAINT implement in `Dba` ###\n    row_count       = @dba.first_value @dba.query SQL\"select count(*) from #{qname_i};\"\n    #.......................................................................................................\n    ### dump data ###\n    ### TAINT implement in `Dba` ###\n    query           = @dba.query SQL\"select * from #{qname_i} order by #{order_by} limit #{limit};\"\n    #.......................................................................................................\n    yield \"\\n\"\n    if row_count > limit then yield ( CND.green CND.reverse '   ' ) + CND.steel \" #{type} #{qname_i} (#{row_count} rows; first #{limit} shown)\"\n    else                      yield ( CND.green CND.reverse '   ' ) + CND.steel \" #{type} #{qname_i} (all #{row_count} rows)\"\n    yield @_tabulate query\n    return null\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n\n\n\n\n\n"
  ]
}